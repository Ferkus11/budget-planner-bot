from aiogram.types import Message
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from db import init_db, add_record, delete_last_expense, delete_category, get_statistics, get_income_statistics
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # –ª–æ–≥ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
init_db()


main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"), KeyboardButton(text="üí∞ –î–æ—Ö–æ–¥")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"), KeyboardButton(text="üßπ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")]
    ],
    resize_keyboard=True
)

user_states = {}



@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –±—é–¥–∂–µ—Ç üí∞", reply_markup=main_keyboard)


@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: Message):
    user_id = message.from_user.id
    expenses = get_statistics(user_id)
    incomes = get_income_statistics(user_id)

    if not expenses and not incomes:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –¥–æ—Ö–æ–¥–æ–≤, –Ω–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∏")
        return

    text = ""

    if expenses:
        text += "<b>üí∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for cat, total in expenses:
            text += f"‚Ä¢ {cat}: {total}‚ÇΩ\n"

    if incomes:
        text += "\n<b>üí∞ –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for cat, total in incomes:
            text += f"‚Ä¢ {cat}: {total}‚ÇΩ\n"

    await message.answer(text)

@dp.message(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é")
async def delete_last_handler(message: Message):
    delete_last_expense(message.from_user.id)
    await message.answer("–£–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å.")

@dp.message(lambda m: m.text == "üßπ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def delete_category_prompt(message: Message):
    user_states[message.from_user.id] = "awaiting_category_delete"
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:")

@dp.message(lambda m: m.text == "üí∞ –î–æ—Ö–æ–¥")
async def handle_income_prompt(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏ –¥–æ—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: &lt;–∫–∞—Ç–µ–≥–æ—Ä–∏—è&gt; &lt;—Å—É–º–º–∞&gt;\n–ü—Ä–∏–º–µ—Ä: –∑–∞—Ä–ø–ª–∞—Ç–∞ 1000"
    )

@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
async def handle_add_expense_prompt(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏ —Ç—Ä–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: &lt;–∫–∞—Ç–µ–≥–æ—Ä–∏—è&gt; &lt;—Å—É–º–º–∞&gt;\n–ü—Ä–∏–º–µ—Ä: –µ–¥–∞ 200"
    )


@dp.message()
async def generic_handler(message: Message):
    user_id = message.from_user.id
    text = message.text.strip().lower()
    if user_states.get(user_id) == "awaiting_category_delete":
        delete_category(user_id, text)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{text}</b> —É–¥–∞–ª–µ–Ω–∞.")
        user_states.pop(user_id)
        return
    try:
        parts = message.text.split()
        if len(parts) == 2:
            category = parts[0]
            amount = int(parts[1])

            if category in ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥"]:
                add_record(user_id, category, amount, record_type="income")
                await message.answer(f"üí∞ –î–æ—Ö–æ–¥ {category} {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                add_record(user_id, category, amount)
                await message.answer(f"üí∏ –¢—Ä–∞—Ç–∞ {category} {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: –µ–¥–∞ 200")
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

